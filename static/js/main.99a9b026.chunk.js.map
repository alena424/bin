{"version":3,"sources":["components/Cell.tsx","components/Automata.tsx","utils/cellUtils.ts","components/AutomataConfig.tsx","components/Rule.tsx","components/ConfigRulesSection.tsx","components/ImportRulesSection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","cell","onClick","index","className","style","active","background","console","log","Automata","cells","map","key","randomArray","boardWidth","Array","fill","undefined","Math","floor","random","randomRule","count","val","value","emptyArray","applyRule","row","neighborhood","rules","ruleIndex","j","idx","findRule","alert","AutomataConfig","setBoardWidth","setNeighborhood","delay","setDelay","maxNumberSteps","setMaxNumberSteps","pattern","defaultValue","onChange","rows","parseInt","currentTarget","name","id","e","target","toString","type","maxSteps","Rule","rule","ruleLength","binaryIndex","padStart","from","bit","ConfigRulesSection","setRules","numberOfRules","length","newRules","ImportRulesSection","useState","json","setJSON","cols","event","placeholder","jsonParsed","JSON","parse","initConfig","data","neighborhoodJson","pow","App","running","setRunning","iterations","setIteration","setRows","React","useEffect","nextInterval","newRows","generatedNewRow","generateNewRow","push","_setRunning","isRunning","clearInterval","setInterval","arr1","arr2","i","compareArrays","actions","newCell","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99a9b026.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CellType, OnClickCell } from \"../models/cellModel\";\r\n\r\ntype CellProps = {\r\n    index: number\r\n    cell: CellType\r\n    onClick?: OnClickCell\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = props => {\r\n    const {cell, onClick, index} = props\r\n\r\n    return (\r\n        <div\r\n            className=\"cell\"\r\n            style={cell.active ? {background: \"black\"} : {background: \"white\"}}\r\n            onClick={() => onClick ? onClick(cell, index) : console.log(\"you can change cells only in the first iteration\")}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from \"./Cell\";\r\nimport { CellType, OnClickCell } from \"../models/cellModel\";\r\n\r\ntype AutomataProps = {\r\n    cells: CellType[]\r\n    onClick?: OnClickCell\r\n}\r\n\r\nconst Automata: React.FC<AutomataProps> = props => {\r\n    const { cells, onClick } = props\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"row\"}>\r\n            {cells.map((cell, key) => <Cell cell={cell} key={key} index={key} onClick={onClick}/>)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Automata;\r\n","import { CellType, RuleType } from \"../models/cellModel\";\r\n\r\nexport const randomArray = (boardWidth: number): CellType[] => Array(boardWidth).fill(undefined).map(() => {\r\n    const randomNumber = Math.floor(Math.random() * 10);\r\n    if (randomNumber % 2 === 0) {\r\n        return { active: true }\r\n    }\r\n    return { active: false }\r\n})\r\n\r\nexport const randomRule = (count: number): RuleType[] => Array(count).fill(0).map((val, index) =>\r\n    ({\r\n        value: Math.floor(Math.random() * 10) % 2 === 0,\r\n        index: index\r\n    }))\r\n\r\nexport const emptyRule = (count: number): RuleType[] => Array(count).fill(0).map((val, index) =>\r\n    ({\r\n        value: false,\r\n        index: index\r\n    }))\r\n\r\nexport const emptyArray = (boardWidth: number): CellType[] => Array(boardWidth).fill(undefined).map(() => ({\r\n    active: false\r\n}))\r\n\r\nexport const compareArrays = (arr1: CellType[], arr2: CellType[]) => {\r\n    for (let i = 0; i < arr1.length; i++) {\r\n        if (arr1[i].active !== arr2[i].active) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst findRule = (index: number, row: CellType[], neighborhood: number): number => {\r\n    let j = 1;\r\n    let ruleIndex = 0;\r\n    for (let idx = index + neighborhood; idx >= index - neighborhood; idx--) {\r\n        console.log(\"text\", j)\r\n        ruleIndex += (row[idx] !== undefined && row[idx].active ? 1 : 0) * j;\r\n        j = j + j;\r\n    }\r\n    return ruleIndex;\r\n}\r\n\r\nconst applyRule = (index: number, row: CellType[], neighborhood: number, rules: RuleType[]): boolean => {\r\n    const ruleIndex = findRule(index, row, neighborhood);\r\n    console.log(\"applyRule\", ruleIndex, row, index, rules);\r\n\r\n    if (rules[ruleIndex] === undefined){\r\n        alert(\"Please reinit the rules\");\r\n        return false;\r\n    }\r\n    return rules[ruleIndex].value;\r\n\r\n}\r\n\r\n// Go through all the row and evaluate next iteration (by looking at the neighbors of each cell)\r\nexport const generateNewRow = (row: CellType[], neighborhood: number, rules: RuleType[]): CellType[] =>\r\n    row.map((cell, index) => ({ ...cell, active: applyRule(index, row, neighborhood, rules) })\r\n)\r\n","import React from \"react\";\r\n\r\ntype SetNumberFunction = (a: number) => void\r\ntype AutomataConfigProps = {\r\n    boardWidth: number\r\n    setBoardWidth: SetNumberFunction\r\n    neighborhood: number\r\n    setNeighborhood: SetNumberFunction\r\n    delay: number\r\n    setDelay: SetNumberFunction\r\n    maxNumberSteps: number\r\n    setMaxNumberSteps: SetNumberFunction\r\n\r\n}\r\n\r\nconst AutomataConfig: React.FC<AutomataConfigProps> = (props) => {\r\n    const {\r\n        boardWidth,\r\n        setBoardWidth,\r\n        neighborhood,\r\n        setNeighborhood,\r\n        delay,\r\n        setDelay,\r\n        maxNumberSteps,\r\n        setMaxNumberSteps,\r\n    } = props;\r\n    const selectNeighborhood = (e: any) => {\r\n        const val = e.target.value\r\n        setNeighborhood(parseInt(val))\r\n    }\r\n\r\n    return (\r\n        <div className={\"row\"}>\r\n            <div className={\"configItem field\"}>\r\n                <div className=\"field-label is-normal\">\r\n                    <label className=\"label\">Number of rows: </label>\r\n                </div>\r\n\r\n                <div className=\"field-body\">\r\n                    <input\r\n                        className=\"input shortInput\"\r\n                        pattern=\"^\\d*$\"\r\n                        defaultValue={boardWidth}\r\n                        onChange={(val) => {\r\n                            const rows = parseInt(val.currentTarget.value)\r\n                            if (rows >= 10 && rows <= 100) {\r\n                                setBoardWidth(rows)\r\n                            }\r\n                        }}/>\r\n                </div>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Neighborhood: </label>\r\n                <div className=\"select\">\r\n                    <select name=\"sur\" id=\"neighborhood\" onChange={selectNeighborhood}\r\n                            defaultValue={neighborhood.toString()}>\r\n                        <option value=\"1\">1-neighborhood</option>\r\n                        <option value=\"2\">2-neighborhood</option>\r\n                        <option value=\"3\">3-neighborhood</option>\r\n                        <option value=\"4\">4-neighborhood</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Delay: </label>\r\n                <input\r\n                    className=\"input shortInput\"\r\n                    pattern=\"^\\d*$\"\r\n                    defaultValue={delay}\r\n                    type=\"number\"\r\n                    onChange={(val) => {\r\n                        const delay = parseInt(val.currentTarget.value)\r\n                        setDelay(delay)\r\n                    }}/>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Maximum number of steps: </label>\r\n                <input\r\n                    className=\"input shortInput\"\r\n                    pattern=\"^\\d*$\"\r\n                    defaultValue={maxNumberSteps}\r\n                    type=\"number\"\r\n                    onChange={(val) => {\r\n                        const maxSteps = parseInt(val.currentTarget.value)\r\n                        setMaxNumberSteps(maxSteps)\r\n                    }}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutomataConfig;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { OnClickCell, RuleType } from \"../models/cellModel\";\r\n\r\ntype RuleProps = {\r\n    rule: RuleType\r\n    ruleLength: number\r\n    onClick: OnClickCell\r\n}\r\n\r\nconst Rule: React.FC<RuleProps> = (props) => {\r\n    const { rule, ruleLength, onClick } = props;\r\n    const { index, value } = rule;\r\n    console.log(rule,\"rule\");\r\n    const binaryIndex = index.toString(2).padStart(ruleLength, \"0\");\r\n    const ruleIndex = [...Array.from(binaryIndex)].map(((bit, idx) => <Cell index={idx}\r\n                                                                            cell={{ active: !!parseInt(bit) }}/>));\r\n    console.log(binaryIndex, index);\r\n    return (\r\n        <div className=\"column\">\r\n            <div className=\"row\">\r\n                {ruleIndex}\r\n            </div>\r\n            <div className=\"row\">\r\n            <Cell index={index} cell={{ active: value }} onClick={onClick}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Rule;\r\n","import Rule from \"./Rule\";\r\nimport React from \"react\";\r\nimport { CellType, RuleType } from \"../models/cellModel\";\r\nimport { emptyRule, randomRule } from \"../utils/cellUtils\";\r\n\r\ntype ConfigRulesProps = {\r\n    rules: RuleType[]\r\n    ruleLength: number\r\n    setRules: (a: RuleType[]) => void\r\n}\r\n\r\nconst ConfigRulesSection: React.FC<ConfigRulesProps> = (props) => {\r\n    const { rules, ruleLength, setRules } = props\r\n\r\n    const numberOfRules = rules.length\r\n    const clearRules = () => {\r\n        setRules(emptyRule(numberOfRules))\r\n    }\r\n    const randomInitRules = () => {\r\n        setRules(randomRule(numberOfRules))\r\n    }\r\n\r\n    const onClick = (cell: CellType, key: number) => {\r\n        const newRules = [...rules]\r\n        newRules[key] = {...newRules[key], value: ! newRules[key].value}\r\n        setRules(newRules)\r\n    }\r\n    return (\r\n        <div className=\"section card\">\r\n            <h3 className=\"subtitle\">Create rules manually</h3>\r\n            <div className=\"columns is-multiline\">\r\n                {rules.map(((rule, key) =>\r\n                        <Rule rule={rule} ruleLength={ruleLength} key={key} onClick={onClick}/>\r\n                ))}\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className={\"configItem\"}>\r\n                    <button className=\"button is-info\" onClick={randomInitRules}>Random Init rules</button>\r\n                </div>\r\n                <div className={\"configItem \"}>\r\n                    <button className=\"button is-danger\" onClick={clearRules}>Clear rules</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfigRulesSection;\r\n","import React, { useState } from \"react\";\r\nimport { RuleType } from \"../models/cellModel\";\r\n\r\ntype ImportRulesSectionProps = {\r\n    setNeighborhood: (a: number) => void\r\n    setRules: (a: RuleType[]) => void\r\n}\r\n\r\nconst ImportRulesSection:React.FC<ImportRulesSectionProps> = (props) => {\r\n    const {setNeighborhood, setRules} = props\r\n\r\n    const [json, setJSON] = useState(\"\")\r\n\r\n    const handleChangeJson = (event: any) => {\r\n        setJSON(event.target.value)\r\n    }\r\n    const initFromJson = () => {\r\n        try {\r\n            const jsonParsed = JSON.parse(json);\r\n            const initConfig: number[] = jsonParsed.data;\r\n            const neighborhoodJson: number = parseInt(jsonParsed.neighborhood);\r\n            if (initConfig && neighborhoodJson) {\r\n                const ruleLength = Math.pow(2, neighborhoodJson * 2 + 1);\r\n                if (ruleLength !== initConfig.length) {\r\n                    alert(\"Rule length must be \" + ruleLength)\r\n                } else {\r\n                    setNeighborhood(neighborhoodJson);\r\n                    setRules(initConfig.map((value, index) => ({ value: !!value, index: index })));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            alert(\"Invalid json\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <h3 className=\"subtitle\">Import rules</h3>\r\n            <div className=\"jsonDiv\">\r\n                <textarea className=\"textarea\" rows={4} cols={50} onChange={handleChangeJson}\r\n                          placeholder={\"Insert JSON values from script\"}></textarea>\r\n            </div>\r\n            <br/>\r\n            <button className=\"button is-primary\" onClick={initFromJson}>Inicialize rules</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportRulesSection;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Automata from \"./components/Automata\";\nimport { CellType, RuleType } from \"./models/cellModel\";\nimport { compareArrays, emptyArray, emptyRule, generateNewRow, randomArray, randomRule } from \"./utils/cellUtils\";\nimport AutomataConfig from \"./components/AutomataConfig\";\nimport ConfigRulesSection from \"./components/ConfigRulesSection\";\nimport ImportRulesSection from \"./components/ImportRulesSection\";\n\nconst defaultNumberOfCells = 10\nconst defaultNumberOfMaxSteps = 10\nconst defaultDelay = 1000\n\nconst App: React.FC = () => {\n    const [boardWidth, setBoardWidth] = useState<number>(defaultNumberOfCells);\n    const [neighborhood, setNeighborhood] = useState<number>(1);\n    const [running, setRunning] = useState<NodeJS.Timeout | undefined>(undefined);\n    const [delay, setDelay] = useState<number>(defaultDelay);\n    const [iterations, setIteration] = useState<number>(0);\n    const [rows, setRows] = useState<CellType[][]>([randomArray(boardWidth)]);\n    const [maxNumberSteps, setMaxNumberSteps] = useState<number>(defaultNumberOfMaxSteps);\n    const ruleLength = neighborhood * 2 + 1;\n    const numberOfRules = Math.pow(2, ruleLength);\n    const [rules, setRules] = useState<RuleType[]>(randomRule(numberOfRules));\n\n    React.useEffect(() => {\n        setRules(randomRule(numberOfRules))\n    }, [numberOfRules])\n\n    const initBoard = () => {\n        setIteration(0)\n        setRows([randomArray(boardWidth)])\n    }\n    const clear = () => {\n        setIteration(0)\n        setRows([emptyArray(boardWidth)])\n    }\n\n    const nextInterval = () => {\n        if (iterations >= maxNumberSteps) return;\n        setIteration((iterations) => {\n            return iterations + 1\n        })\n        setRows((rows) => {\n            const newRows = [...rows];\n            const generatedNewRow = generateNewRow(rows[rows.length - 1], neighborhood, rules);\n            newRows.push(generatedNewRow);\n            return newRows;\n        })\n    }\n\n    const _setRunning = (isRunning: boolean) => {\n        if (running) {\n            clearInterval(running);\n        }\n        if (isRunning) {\n            const running = setInterval(nextInterval, delay);\n            setRunning(running);\n        } else {\n            setRunning(undefined);\n        }\n    }\n\n\n    React.useEffect(() => {\n        if (rows.length < 2) return\n        if (compareArrays(rows[rows.length - 1], rows[rows.length - 2])) {\n            _setRunning(false)\n        }\n    }, [rows])\n\n    React.useEffect(() => {\n        if (iterations >= maxNumberSteps) {\n            _setRunning(false)\n        }\n    }, [iterations, maxNumberSteps])\n\n\n    const actions = (\n        <div className=\"buttons is-centered\">\n            <div className={\"configItem\"}>\n                {\n                    running\n                        ? <button className=\"button is-danger\" onClick={() => _setRunning(false)}>Stop</button>\n                        : <button className=\"button is-success\" onClick={() => _setRunning(true)}>Start</button>\n                }\n            </div>\n            <div className={\"configItem\"}>\n                <button className=\"button is-info\" onClick={nextInterval}>Step</button>\n            </div>\n            <div className={\"configItem\"}>\n                <button className=\"button is-info\" onClick={initBoard}>Random Init</button>\n            </div>\n            <div className={\"configItem \"}>\n                <button className=\"button is-danger\" onClick={clear}>Clear</button>\n            </div>\n        </div>\n    )\n    const onClick = (cell: CellType, key: number) => {\n        if (iterations === 0) {\n            const newCell: CellType = { ...cell, active: !cell.active }\n            const newRows = [...rows];\n            newRows[0][key] = newCell\n            setRows(newRows);\n        }\n    }\n\n    return (\n        <div className=\"App container\">\n            <h1 className=\"title\">BIN - visualization cellular automata</h1>\n            <AutomataConfig\n                boardWidth={boardWidth}\n                delay={delay}\n                maxNumberSteps={maxNumberSteps}\n                setMaxNumberSteps={setMaxNumberSteps}\n                neighborhood={neighborhood}\n                setNeighborhood={(value) => {\n                    setNeighborhood(value)\n\n                }}\n                setBoardWidth={setBoardWidth}\n                setDelay={setDelay}\n            />\n            <br/>\n            <br/>\n            <div>\n                {rows.map((row, key) => (\n                    <Automata cells={row}\n                              key={key}\n                              onClick={key === 0 ? onClick : undefined}\n                    />\n                ))}\n            </div>\n            <br/>\n            Iteration: <span className=\"tag is-success\">{iterations}</span>\n            <br/>\n            <br/>\n            {actions}\n            <ConfigRulesSection\n                ruleLength={ruleLength}\n                rules={rules}\n                setRules={setRules}\n            />\n            <ImportRulesSection\n                setNeighborhood={setNeighborhood}\n                setRules={setRules}\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bulma/css/bulma.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
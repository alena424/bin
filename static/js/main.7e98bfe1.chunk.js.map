{"version":3,"sources":["components/Cell.tsx","components/Automata.tsx","utils/cellUtils.ts","components/AutomataConfig.tsx","components/Rule.tsx","components/ConfigRulesSection.tsx","components/ImportRulesSection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","cell","onClick","index","className","style","active","background","console","log","Automata","cells","black","filter","length","white","map","key","randomArray","boardWidth","Array","fill","undefined","Math","floor","random","randomRule","count","val","value","emptyArray","applyRule","row","neighborhood","rules","ruleIndex","j","idx","findRule","alert","AutomataConfig","setBoardWidth","setNeighborhood","delay","setDelay","maxNumberSteps","setMaxNumberSteps","pattern","onChange","rows","parseInt","currentTarget","name","id","e","target","toString","defaultValue","type","maxSteps","Rule","rule","ruleLength","binaryIndex","padStart","from","bit","ConfigRulesSection","setRules","numberOfRules","newRules","ImportRulesSection","useState","json","setJSON","cols","event","placeholder","jsonParsed","JSON","parse","initConfig","data","neighborhoodJson","cellular_length","steps","pow","App","running","setRunning","iterations","setIteration","setCells","React","useEffect","nextInterval","newRows","generatedNewRow","generateNewRow","push","_setRunning","isRunning","clearInterval","setInterval","arr1","arr2","i","compareArrays","actions","newCell","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e98bfe1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CellType, OnClickCell } from \"../models/cellModel\";\r\n\r\ntype CellProps = {\r\n    index: number\r\n    cell: CellType\r\n    onClick?: OnClickCell\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = props => {\r\n    const {cell, onClick, index} = props\r\n\r\n    return (\r\n        <div\r\n            className=\"cell\"\r\n            style={cell.active ? {background: \"black\"} : {background: \"white\"}}\r\n            onClick={() => onClick ? onClick(cell, index) : console.log(\"you can change cells only in the first iteration\")}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from \"./Cell\";\r\nimport { CellType, OnClickCell } from \"../models/cellModel\";\r\n\r\ntype AutomataProps = {\r\n    cells: CellType[]\r\n    onClick?: OnClickCell\r\n}\r\n\r\nconst Automata: React.FC<AutomataProps> = props => {\r\n    const { cells, onClick } = props\r\n\r\n    const black = cells.filter(cell => cell.active).length\r\n    const white = cells.filter(cell => !cell.active).length\r\n    return (\r\n        <div className=\"row\">\r\n            {cells.map((cell, key) => <Cell cell={cell} key={key} index={key} onClick={onClick}/>)}\r\n            <div className=\"paddingLeft\">\r\n                <p>(black: {black}, white: {white})</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Automata;\r\n","import { CellType, RuleType } from \"../models/cellModel\";\r\n\r\nexport const randomArray = (boardWidth: number): CellType[] => Array(boardWidth).fill(undefined).map(() => {\r\n    const randomNumber = Math.floor(Math.random() * 10);\r\n    if (randomNumber % 2 === 0) {\r\n        return { active: true }\r\n    }\r\n    return { active: false }\r\n})\r\n\r\nexport const randomRule = (count: number): RuleType[] => Array(count).fill(0).map((val, index) =>\r\n    ({\r\n        value: Math.floor(Math.random() * 10) % 2 === 0,\r\n        index: index\r\n    }))\r\n\r\nexport const emptyRule = (count: number): RuleType[] => Array(count).fill(0).map((val, index) =>\r\n    ({\r\n        value: false,\r\n        index: index\r\n    }))\r\n\r\nexport const emptyArray = (boardWidth: number): CellType[] => Array(boardWidth).fill(undefined).map(() => ({\r\n    active: false\r\n}))\r\n\r\nexport const compareArrays = (arr1: CellType[], arr2: CellType[]) => {\r\n    for (let i = 0; i < arr1.length; i++) {\r\n        if (arr1[i].active !== arr2[i].active) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nconst findRule = (index: number, row: CellType[], neighborhood: number): number => {\r\n    let j = 1;\r\n    let ruleIndex = 0;\r\n    for (let idx = index + neighborhood; idx >= index - neighborhood; idx--) {\r\n        console.log(\"text\", j)\r\n        ruleIndex += (row[idx] !== undefined && row[idx].active ? 1 : 0) * j;\r\n        j = j + j;\r\n    }\r\n    return ruleIndex;\r\n}\r\n\r\nconst applyRule = (index: number, row: CellType[], neighborhood: number, rules: RuleType[]): boolean => {\r\n    const ruleIndex = findRule(index, row, neighborhood);\r\n    console.log(\"applyRule\", ruleIndex, row, index, rules);\r\n\r\n    if (rules[ruleIndex] === undefined){\r\n        alert(\"Please reinit the rules\");\r\n        return false;\r\n    }\r\n    return rules[ruleIndex].value;\r\n\r\n}\r\n\r\n// Go through all the row and evaluate next iteration (by looking at the neighbors of each cell)\r\nexport const generateNewRow = (row: CellType[], neighborhood: number, rules: RuleType[]): CellType[] =>\r\n    row.map((cell, index) => ({ ...cell, active: applyRule(index, row, neighborhood, rules) })\r\n)\r\n","import React from \"react\";\r\nimport { SetNumberFunction } from \"../models/cellModel\";\r\n\r\ntype AutomataConfigProps = {\r\n    boardWidth: number\r\n    setBoardWidth: SetNumberFunction\r\n    neighborhood: number\r\n    setNeighborhood: SetNumberFunction\r\n    delay: number\r\n    setDelay: SetNumberFunction\r\n    maxNumberSteps: number\r\n    setMaxNumberSteps: SetNumberFunction\r\n}\r\n\r\nconst AutomataConfig: React.FC<AutomataConfigProps> = (props) => {\r\n    const {\r\n        boardWidth,\r\n        setBoardWidth,\r\n        neighborhood,\r\n        setNeighborhood,\r\n        delay,\r\n        setDelay,\r\n        maxNumberSteps,\r\n        setMaxNumberSteps,\r\n    } = props;\r\n    const selectNeighborhood = (e: any) => {\r\n        const val = e.target.value\r\n        setNeighborhood(parseInt(val))\r\n    }\r\n\r\n    return (\r\n        <div className={\"row\"}>\r\n            <div className={\"configItem field\"}>\r\n                <div className=\"field-label is-normal\">\r\n                    <label className=\"label\">Number of rows: </label>\r\n                </div>\r\n\r\n                <div className=\"field-body\">\r\n                    <input\r\n                        className=\"input shortInput\"\r\n                        pattern=\"^\\d*$\"\r\n                        value={boardWidth}\r\n                        onChange={(val) => {\r\n                            const rows = parseInt(val.currentTarget.value)\r\n                            if (rows >= 1 && rows <= 100) {\r\n                                setBoardWidth(rows)\r\n                            }\r\n                        }}/>\r\n                </div>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Neighborhood: </label>\r\n                <div className=\"select\">\r\n                    <select name=\"sur\" id=\"neighborhood\" onChange={selectNeighborhood}\r\n                            value={neighborhood.toString()}>\r\n                        <option value=\"1\">1-neighborhood</option>\r\n                        <option value=\"2\">2-neighborhood</option>\r\n                        <option value=\"3\">3-neighborhood</option>\r\n                        <option value=\"4\">4-neighborhood</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Delay: </label>\r\n                <input\r\n                    className=\"input shortInput\"\r\n                    pattern=\"^\\d*$\"\r\n                    defaultValue={delay}\r\n                    type=\"number\"\r\n                    onChange={(val) => {\r\n                        const delay = parseInt(val.currentTarget.value)\r\n                        setDelay(delay)\r\n                    }}/>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <label className=\"label\">Maximum number of steps: </label>\r\n                <input\r\n                    className=\"input shortInput\"\r\n                    pattern=\"^\\d*$\"\r\n                    value={maxNumberSteps}\r\n                    type=\"number\"\r\n                    onChange={(val) => {\r\n                        const maxSteps = parseInt(val.currentTarget.value)\r\n                        setMaxNumberSteps(maxSteps)\r\n                    }}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AutomataConfig;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport { OnClickCell, RuleType } from \"../models/cellModel\";\r\n\r\ntype RuleProps = {\r\n    rule: RuleType\r\n    ruleLength: number\r\n    onClick: OnClickCell\r\n}\r\n\r\nconst Rule: React.FC<RuleProps> = (props) => {\r\n    const { rule, ruleLength, onClick } = props;\r\n    const { index, value } = rule;\r\n    console.log(rule,\"rule\");\r\n    const binaryIndex = index.toString(2).padStart(ruleLength, \"0\");\r\n    const ruleIndex = [...Array.from(binaryIndex)].map(((bit, idx) => <Cell index={idx}\r\n                                                                            cell={{ active: !!parseInt(bit) }}/>));\r\n    console.log(binaryIndex, index);\r\n    return (\r\n        <div className=\"column\">\r\n            <div className=\"row\">\r\n                {ruleIndex}\r\n            </div>\r\n            <div className=\"row\">\r\n            <Cell index={index} cell={{ active: value }} onClick={onClick}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Rule;\r\n","import Rule from \"./Rule\";\r\nimport React from \"react\";\r\nimport { CellType, RuleType } from \"../models/cellModel\";\r\nimport { emptyRule, randomRule } from \"../utils/cellUtils\";\r\n\r\ntype ConfigRulesProps = {\r\n    rules: RuleType[]\r\n    ruleLength: number\r\n    setRules: (a: RuleType[]) => void\r\n}\r\n\r\nconst ConfigRulesSection: React.FC<ConfigRulesProps> = (props) => {\r\n    const { rules, ruleLength, setRules } = props\r\n\r\n    const numberOfRules = rules.length\r\n    const clearRules = () => {\r\n        setRules(emptyRule(numberOfRules))\r\n    }\r\n    const randomInitRules = () => {\r\n        setRules(randomRule(numberOfRules))\r\n    }\r\n\r\n    const onClick = (cell: CellType, key: number) => {\r\n        const newRules = [...rules]\r\n        newRules[key] = {...newRules[key], value: ! newRules[key].value}\r\n        setRules(newRules)\r\n    }\r\n    return (\r\n        <div className=\"section card\">\r\n            <h3 className=\"subtitle\">Create rules manually</h3>\r\n            <div className=\"columns is-multiline\">\r\n                {rules.map(((rule, key) =>\r\n                        <Rule rule={rule} ruleLength={ruleLength} key={key} onClick={onClick}/>\r\n                ))}\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className={\"configItem\"}>\r\n                    <button className=\"button is-info\" onClick={randomInitRules}>Random Init rules</button>\r\n                </div>\r\n                <div className={\"configItem \"}>\r\n                    <button className=\"button is-danger\" onClick={clearRules}>Clear rules</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfigRulesSection;\r\n","import React, { useState } from \"react\";\r\nimport { RuleType, SetNumberFunction } from \"../models/cellModel\";\r\n\r\ntype ImportRulesSectionProps = {\r\n    setNeighborhood: SetNumberFunction\r\n    setRules: (a: RuleType[]) => void\r\n    setBoardWidth: SetNumberFunction\r\n    setMaxNumberSteps: SetNumberFunction\r\n}\r\n\r\nconst ImportRulesSection:React.FC<ImportRulesSectionProps> = (props) => {\r\n    const {setNeighborhood, setRules, setBoardWidth, setMaxNumberSteps} = props\r\n    const [json, setJSON] = useState(\"\")\r\n\r\n    const handleChangeJson = (event: any) => {\r\n        setJSON(event.target.value)\r\n    }\r\n    const initFromJson = () => {\r\n        try {\r\n            const jsonParsed = JSON.parse(json);\r\n            const initConfig: number[] = jsonParsed.data;\r\n            const neighborhoodJson: number = parseInt(jsonParsed.neighborhood);\r\n            const cellular_length: number = parseInt(jsonParsed.cellular_length);\r\n            const steps: number = parseInt(jsonParsed.steps);\r\n            if (initConfig && neighborhoodJson) {\r\n                const ruleLength = Math.pow(2, neighborhoodJson * 2 + 1);\r\n                if (ruleLength !== initConfig.length) {\r\n                    alert(\"Rule length must be \" + ruleLength)\r\n                } else {\r\n                    setMaxNumberSteps(steps);\r\n                    setBoardWidth(cellular_length)\r\n                    setNeighborhood(neighborhoodJson);\r\n                    setRules(initConfig.map((value, index) => ({ value: !!value, index: index })));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            alert(\"Invalid json\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <h3 className=\"subtitle\">Import rules</h3>\r\n            <div className=\"jsonDiv\">\r\n                <textarea className=\"textarea\" rows={4} cols={50} onChange={handleChangeJson}\r\n                          placeholder={\"Insert JSON values from script\"}></textarea>\r\n            </div>\r\n            <br/>\r\n            <button className=\"button is-primary\" onClick={initFromJson}>Inicialize rules</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImportRulesSection;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Automata from \"./components/Automata\";\r\nimport { CellType, RuleType } from \"./models/cellModel\";\r\nimport { compareArrays, emptyArray, generateNewRow, randomArray, randomRule } from \"./utils/cellUtils\";\r\nimport AutomataConfig from \"./components/AutomataConfig\";\r\nimport ConfigRulesSection from \"./components/ConfigRulesSection\";\r\nimport ImportRulesSection from \"./components/ImportRulesSection\";\r\n\r\nconst defaultNumberOfCells = 10\r\nconst defaultNumberOfMaxSteps = 20\r\nconst defaultDelay = 1000\r\n\r\nconst App: React.FC = () => {\r\n    const [boardWidth, setBoardWidth] = useState<number>(defaultNumberOfCells);\r\n    const [neighborhood, setNeighborhood] = useState<number>(1);\r\n    const [running, setRunning] = useState<NodeJS.Timeout | undefined>(undefined);\r\n    const [delay, setDelay] = useState<number>(defaultDelay);\r\n    const [iterations, setIteration] = useState<number>(0);\r\n    const [cells, setCells] = useState<CellType[][]>([randomArray(boardWidth)]);\r\n    const [maxNumberSteps, setMaxNumberSteps] = useState<number>(defaultNumberOfMaxSteps);\r\n    const ruleLength = neighborhood * 2 + 1;\r\n    const numberOfRules = Math.pow(2, ruleLength);\r\n    const [rules, setRules] = useState<RuleType[]>(randomRule(numberOfRules));\r\n\r\n    React.useEffect(() => {\r\n        setRules(randomRule(numberOfRules))\r\n    }, [numberOfRules])\r\n\r\n    React.useEffect(() => {\r\n        setCells([randomArray(boardWidth)])\r\n    }, [boardWidth])\r\n\r\n    const initBoard = () => {\r\n        setIteration(0)\r\n        setCells([randomArray(boardWidth)])\r\n    }\r\n    const clear = () => {\r\n        setIteration(0)\r\n        setCells([emptyArray(boardWidth)])\r\n    }\r\n\r\n    const nextInterval = () => {\r\n        if (iterations >= maxNumberSteps) return;\r\n        setIteration((iterations) => {\r\n            return iterations + 1\r\n        })\r\n        setCells((rows) => {\r\n            const newRows = [...rows];\r\n            const generatedNewRow = generateNewRow(rows[rows.length - 1], neighborhood, rules);\r\n            newRows.push(generatedNewRow);\r\n            return newRows;\r\n        })\r\n    }\r\n\r\n    const _setRunning = (isRunning: boolean) => {\r\n        if (running) {\r\n            clearInterval(running);\r\n        }\r\n        if (isRunning) {\r\n            const running = setInterval(nextInterval, delay);\r\n            setRunning(running);\r\n        } else {\r\n            setRunning(undefined);\r\n        }\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (cells.length < 2) return\r\n        if (compareArrays(cells[cells.length - 1], cells[cells.length - 2])) {\r\n            _setRunning(false)\r\n        }\r\n    }, [cells])\r\n\r\n    React.useEffect(() => {\r\n        if (iterations >= maxNumberSteps) {\r\n            _setRunning(false)\r\n        }\r\n    }, [iterations, maxNumberSteps])\r\n\r\n    const actions = (\r\n        <div className=\"buttons is-centered\">\r\n            <div className={\"configItem\"}>\r\n                {\r\n                    running\r\n                        ? <button className=\"button is-danger\" onClick={() => _setRunning(false)}>Stop</button>\r\n                        : <button className=\"button is-success\" onClick={() => _setRunning(true)}>Start</button>\r\n                }\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <button className=\"button is-info\" onClick={nextInterval}>Step</button>\r\n            </div>\r\n            <div className={\"configItem\"}>\r\n                <button className=\"button is-info\" onClick={initBoard}>Random Init</button>\r\n            </div>\r\n            <div className={\"configItem \"}>\r\n                <button className=\"button is-danger\" onClick={clear}>Clear</button>\r\n            </div>\r\n        </div>\r\n    )\r\n    const onClick = (cell: CellType, key: number) => {\r\n        if (iterations === 0) {\r\n            const newCell: CellType = { ...cell, active: !cell.active }\r\n            const newRows = [...cells];\r\n            newRows[0][key] = newCell\r\n            setCells(newRows);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App container\">\r\n            <h1 className=\"title\">BIN - cellular automata visualization</h1>\r\n            <h4 className=\"subtitle\">Alena Tesařová (xtesar36@stud.fit.vutbr.cz)</h4>\r\n            <AutomataConfig\r\n                boardWidth={boardWidth}\r\n                delay={delay}\r\n                maxNumberSteps={maxNumberSteps}\r\n                setMaxNumberSteps={setMaxNumberSteps}\r\n                neighborhood={neighborhood}\r\n                setNeighborhood={(value) => {\r\n                    setNeighborhood(value)\r\n\r\n                }}\r\n                setBoardWidth={setBoardWidth}\r\n                setDelay={setDelay}\r\n            />\r\n            <br/>\r\n            <br/>\r\n            <div>\r\n                {cells.map((row, key) => (\r\n                    <Automata cells={row}\r\n                              key={key}\r\n                              onClick={key === 0 ? onClick : undefined}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <br/>\r\n            Iteration: <span className=\"tag is-success\">{iterations}</span>\r\n            <br/>\r\n            <br/>\r\n            {actions}\r\n            <ConfigRulesSection\r\n                ruleLength={ruleLength}\r\n                rules={rules}\r\n                setRules={setRules}\r\n            />\r\n            <ImportRulesSection\r\n                setNeighborhood={setNeighborhood}\r\n                setRules={setRules}\r\n                setBoardWidth={setBoardWidth}\r\n                setMaxNumberSteps={setMaxNumberSteps}\r\n            />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport '../node_modules/bulma/css/bulma.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}